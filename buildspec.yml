version: 0.2

env:
  variables:
    EKS_CLUSTER_NAME: sample-webserver-eks-cluster
    ECR_REGISTRY: 746413500084.dkr.ecr.us-east-1.amazonaws.com
    REPO_NAME: sample-webserver-repo
    AWS_DEFAULT_REGION: us-east-1

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - echo Authenticating with ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo "IMAGE_TAG=$IMAGE_TAG"
      - export IMAGE_TAG

  build:
    commands:
      - echo Building Docker image...
      - docker build -t $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG .
      - echo Pushing Docker image to ECR...
      - docker push $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG

  post_build:
    commands:
      - echo Updating kubeconfig for EKS...
      - export HOME=/root
      - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $EKS_CLUSTER_NAME

      - echo Verifying files...
      - ls -R

      - echo Replacing image URI in deployment.yaml...
      - sed "s|<image>|$ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG|g" k8s/deployment.yaml > k8s/rendered-deployment.yaml || { echo "❌ SED failed to generate rendered-deployment.yaml"; exit 1; }

      - echo --- Rendered Deployment YAML ---
      - cat k8s/rendered-deployment.yaml || echo "❌ File not found: rendered-deployment.yaml"

      - echo Applying Kubernetes manifests...
      - kubectl apply -f k8s/rendered-deployment.yaml
      - kubectl apply -f k8s/service.yaml

      - echo Checking for LoadBalancer External IP...
      - |
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get svc webserver-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [[ -n "$EXTERNAL_IP" ]]; then
            echo "✅ App is available at: http://$EXTERNAL_IP"
            break
          fi
          echo "⏳ Waiting for external IP... ($i/30)"
          sleep 10
        done

artifacts:
  files:
    - imagedefinitions.json
